I. Create User controller and model
  1. rails g controller Users new
  2. rails g model User email:string password_hash:string password_salt:string
  3. rake db:migrate
  4. In users_controller.rb
    def new
      @user = User.new
    end
    def create
      @user = User.new(user_params)
      if @user.save
        redirect_to root_url, notice: "Signed up!"
      else
        render 'new'
      end
    end
    private
    def user_params
      params.require(:user).permit(:email, :password, :password_confirmation)
    end
II. Add ability to sign up a new user
  1. In users/new.html.erb
    <h1>Sign Up</h1>
    <%= form_for @user do |f| %>
      <% if @user.errors.any? %>
        <div class="error_messages">
          <h2>Form is invalid</h2>
          <ul>
            <% for message in @user.errors.full_messages %>
              <li><%= message %></li>
            <% end %>
          </ul>
        </div>
      <% end %>
      <p>
        <%= f.label :email %><br/>
        <%= f.text_field :email %>
      </p>
      <p>
        <%= f.label :password %><br/>
        <%= f.password_field :password %>
      </p>
      <p>
        <%= f.label :password_confirmation %><br/>
        <%= f.password_field :password_confirmation %>
      </p>
      <p class="button"><%= f.submit %></p>
    <% end %>
  2. In routes.rb
    get 'sign_up' => 'users#new'
    root 'users#new'
    resources :users
  3. In user.rb
    attr_accessor :password
    validates_confirmation_of :password
    validates_presence_of :password, on: :create
    validates_presence_of :email
    validates_uniqueness_of :email
  4. In Gemfile
    gem 'bcrypt-ruby', require: 'bcrypt'
  5. bundle install
  6. In user.rb
    before_save :encrypt_password
    def encrypt_password
      if password.present?
        self.password_salt = BCrypt::Engine.generate_salt
        self.password_hash = BCrypt::Engine.hash_secret(password, password_salt)
      end
    end
  7. Go to /sign_up
    a. Create a new user with blank password to see error
    b. Create a new user with perfect password. Go in rails console and do 'User.all' to see the user created.
III. Add ability to log in
  1. rails g controller Sessions new
  2. In sessions/new.html.erb
    <h1>Log In</h1>
    <%= form_tag sessions_path do %>
      <p>
        <%= label_tag :email %><br/>
        <%= text_field_tag :email, params[:email] %>
      </p>
      <p>
        <%= label_tag :password %><br/>
        <%= password_field_tag :password %>
      </p>
      <p class='button'><%= submit_tag %></p>
    <% end %>
  3. In routes.rb
    get 'log_in' => 'sessions#new'
    resources :sessions
  4. In sessions_controller.rb
    def create
      user = User.authenticate(params[:email], params[:password])
      if user
        session[:user_id] = user.id
        redirect_to root_url, notice: "Logged in!"
      else
        flash.now.alert = "Invalid email or password"
        render 'new'
      end
    end
  5. In user.rb
    def self.authenticate(email, password)
      user = User.find_by_email(email)
      if user && user.password_hash == BCrypt::Engine.hash_secret(password, user.password_salt)
        user
      else
        nil
      end
    end
  6. In application.html.erb, in <body> before <yield>
    <% flash.each do |name, msg| %>
      <%= content_tag :div, msg, id: 'flash_#{name}' %>
    <% end %>
  7. Go to /sessions/new
    i. Login with invalid email or password
    ii. Login with valid
IV. Add ability to log out
  1. In routes.rb
    get 'log_out' => 'sessions#destroy'
  2. In sessions_controller.rb
    def destroy
      session[:user_id] = nil
      redirect_to root_url, notice: "Logged out!"
    end
  3. Go to /log_out to log out
V. Add links to Sign Up and Sign In
  1. In application.html.erb, in <body> before flash
    <div id="user_nav">
      <% if current_user %>
        Logged in as <%= current_user.email %>
        <%= link_to 'Log Out', log_out_path %>
      <% else %>
        <%= link_to 'Sign up', sign_up_path %> or
        <%= link_to 'Log in', log_in_path %>
      <% end %>
    </div>
  2. In application_controller.rb
    helper_method :current_user
    private
    def current_user
      @current_user ||= User.find(session[:user_id]) if session[:user_id]
    end
  3. Reload the root page to see the Sign up and Sign in links
